#Code for final-Python for Genomic Data Science Johns Hopkins University

from Bio import SeqIO
import re
from collections import Counter
import itertools


PART 1-Number of sequences and lengths of sequences

#To find number of records in the given FASTA file

fasta_file_path='data/dna2.fasta'
records = SeqIO.index(fasta_file_path,"fasta")
print("Number of sequences in this file: ",len(records))

#To find the lengths of sequences in the FASTA file
#To find longest and shortest sequences in the FASTA file
#To find if there are more than one longest or shortest sequence
#To get the identifiers of the shortest and longest sequences

"""
Inputs: records from SeqIO.index(file path,file format); Input format-IndexedSeqFileDict

Outputs:
1. sequences      - list containing all sequences as strings
2. seq_id         - list containing all sequence ids as strings
3. length_of_seq  - list containing lengths of all sequences as int
4. max_id         - list containing ids of longest sequences as str
5. min_id         - list containing ids of shortest sequences as str

"""

sequences=[str(value.seq) for key,value in records.items()]
seq_id=[str(value.id) for key,value in records.items()]
length_of_seq=[*map(len,sequences)]

max_id=[seq_id[length_of_seq.index(length)] for length in length_of_seq if length==max(length_of_seq)]
min_id=[seq_id[length_of_seq.index(length)] for length in length_of_seq if length==min(length_of_seq)]

print("Longest sequence(s) has(ve) the id(s):",max_id, "with length: ",max(length_of_seq))
print("Shortest sequence(s) has(ve) the id(s):",min_id, "with length: ",min(length_of_seq))



PART 2-Open Reading Frames

#ORFs in forward strand are considered 
#As per given exam guidelines, start codon is "ATG" and stop codons are "TAA, TAG or TGA"


def longest_orf_finder(sequence,reading_frame):
    """
    Function to find orf of maximum length and its starting position in a given sequence and reading frame
    The starting position of the orf indicates the character number in the sequence and not index number
    
    Inputs:
    sequence       - The sequence as a string
    reading_frame  - Reading frame (1,2 or 3) as int
    
    Outputs:
    orf_length_max - int variable which gives Length of longest ORF 
    start_pos      - int variable which gives the starting position of orf (not index number) in a sequence
    The start_pos variable is assigned to value -1 is there is no ORF found in the sequence for a given reading frame
    
    """
    orf_start_pos=[]
    length_orf=[]

    r1=re.finditer("(ATG)",sequence)
    s_pos=[m1.start() for m1 in r1 if (m1.start())%3==0]

    r2=re.finditer("(TAA|TAG|TGA)",sequence)
    st_pos=[m2.start() for m2 in r2 if (m2.start())%3==0]

    for start in range(0,len(s_pos)):
        count=0
        for stop in range(0,len(st_pos)):
            if s_pos[start]<st_pos[stop] and count==0:
                orf=sequence[s_pos[start]:st_pos[stop]+3]
                length_orf.append(len(orf))
                orf_start_pos.append(s_pos[start])
                count+=1
            
    if len(length_orf)==0:
        orf_length_max=0
        start_pos=-1
    else:
        orf_length_max=max(length_orf)  
        start_pos=orf_start_pos[length_orf.index(max(length_orf))]+reading_frame+1
    

    return orf_length_max,start_pos



#To find longest ORFs in reading frames 1, 2 and 3 for all sequences in the FASTA file
#To find the starting position of the longest ORF in all sequences in a given reading frame
#Only the forward strand is considered here

"""
The following code was modified from Biopython tutorial "20.1.13 Identifying open reading frames"
The code calls the function "longest_orf_finder"

Inputs:
records           - from SeqIO.index(file path,file format); format-IndexedSeqFileDict

frame             - String type input for the function longest_orf_finder 
reading_frame     - int type input for the function longest_orf_finder

Outputs:
max_length_orf0   - list containing longest ORF of each sequence as an element, in reading frame 1
max_length_orf1   - list containing longest ORF of each sequence as an element, in reading frame 2
max_length_orf2   - list containing longest ORF of each sequence as an element, in reading frame 3

The maximum of each list gives the longest ORF in all the sequences in the file for the given reading frame accordingly

starting_pos_orf0 - list containing starting position of longest ORF of each sequence as an element, in reading frame 1
starting_pos_orf1 - list containing starting position of longest ORF of each sequence as an element, in reading frame 2
starting_pos_orf2 - list containing starting position of longest ORF of each sequence as an element, in reading frame 3

The maximum of each list gives starting position of the longest ORF in all the sequences in the file for the given reading frame accordingly
The starting position indicates the character number in the sequence and not the index number.

"""

max_length_orf0=[]
starting_pos_orf0=[]
max_length_orf1=[]
starting_pos_orf1=[]
max_length_orf2=[]
starting_pos_orf2=[]

for key,value in records.items():
    for strand, nuc in [(+1, value.seq)]:
        for reading_frame in range(3):
            length = 3 * ((len(value.seq)-reading_frame) // 3)
            frame=str(nuc[reading_frame:reading_frame+length])
            max_length_orf,starting_pos_orf=longest_orf_finder(frame,reading_frame)

            if reading_frame==0:
                max_length_orf0.append(max_length_orf)
                starting_pos_orf0.append(starting_pos_orf)
                
            if reading_frame==1:
                max_length_orf1.append(max_length_orf)
                starting_pos_orf1.append(starting_pos_orf)
                
            if reading_frame==2:
                max_length_orf2.append(max_length_orf)
                starting_pos_orf2.append(starting_pos_orf)



print("Longest ORF in reading frame 1 is of length:",max(max_length_orf0),"and starts at position",starting_pos_orf0[max_length_orf0.index(max(max_length_orf0))])
print("Longest ORF in reading frame 2 is of length:",max(max_length_orf1),"and starts at position",starting_pos_orf1[max_length_orf1.index(max(max_length_orf1))])
print("Longest ORF in reading frame 3 is of length:",max(max_length_orf2),"and starts at position",starting_pos_orf2[max_length_orf2.index(max(max_length_orf2))])


#To find longest ORF in a sequence for a given identifier "gi|142022655|gb|EQ086233.1|16"
#Only the forward strand is considered here 

for key,value in records.items():
    if value.id=="gi|142022655|gb|EQ086233.1|16":
        for strand, nuc in [(+1, value.seq)]:
            for reading_frame in range(3):
                length = 3 * ((len(value.seq)-reading_frame) // 3)
                frame=str(nuc[reading_frame:reading_frame+length])
                
                if reading_frame==0:
                    max_length_orf_id0,starting_pos_orf_id0=longest_orf_finder(frame,reading_frame)

                if reading_frame==1:
                    max_length_orf_id1,starting_pos_orf_id1=longest_orf_finder(frame,reading_frame)

                if reading_frame==2:
                    max_length_orf_id2,starting_pos_orf_id2=longest_orf_finder(frame,reading_frame)

print("Longest ORF in reading frame 1 is of length:",max_length_orf_id0,"and starts at position",starting_pos_orf_id0)
print("Longest ORF in reading frame 2 is of length:",max_length_orf_id1,"and starts at position",starting_pos_orf_id1)
print("Longest ORF in reading frame 3 is of length:",max_length_orf_id2,"and starts at position",starting_pos_orf_id2)
print("Longest ORF for the given id in all reading frames is of length:",max(max_length_orf_id0,max_length_orf_id1,max_length_orf_id2))



PART 3- kmers in sequences

def kmers(Text, k):
    """
    This function gives the most frequent kmers occuring in a Text
    
    Inputs:
    Text  - string type input 
    k     - int type input and represents the length of a Pattern which occurs as a k-mer in Text
    
    Outputs:
    kmers - list with all kmers occuring in the Text 
    
    """    
    kmers=[]
    for i in range(0,len(Text)-1):
        Pattern=Text[i:i+k]
        kmers.append(Pattern)
       
    return kmers
    
#k value is given
k=12 

#kmers_list_of_lists is a list type variable containing list of kmers of each sequences as elements
kmers_list_of_lists=[*map(lambda seq: kmers(seq,k),sequences)]

#all_kmers is a list variable containing the flattened list kmer_list_of_lists 
all_kmers=list(itertools.chain.from_iterable(kmers_list_of_lists))

#Counter from collections module is used to calculate the occurence of each kmers of given length k
#kmers_count is a dictionary type variable which contains kmers as keys and frequency of their occurences in all sequences in the file as values
kmers_count=dict(Counter(all_kmers))

#max_kmer_frequency is int type variable which gives the maximum kmer frequency in all the sequences
max_kmer_frequency=max(kmers_count.values())

#most_frequent_kmers is a list containing all the most frequently occuring kmers in the all the sequences of the given FASTA file
most_frequent_kmers=[key for key,value in kmers_count.items() if value==max_kmer_frequency]
print(most_frequent_kmers)
